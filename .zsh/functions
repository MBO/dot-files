#!/bin/zsh
#
# list contents of directory on every "cd"
#function chpwd
#{
#    integer ls_lines="$(ls -C | wc -l)"
#    if [[ $ls_lines -eq 0 ]]; then
#        echo No files found: Empty Directory 
#    else
#        ls | more
#        echo "\e[1;32m --[\e[1;34m Dirs:\e[1;36m `ls -l | egrep \"^drw\" | wc -l` \e[1;32m|\e[1;35m Files: \e[1;31m`ls -l | egrep -v \"^drw\" | grep -v total | wc -l` \e[1;32m]--"
#    fi
#    # source and create project environment
#    if [[ -f $PWD/.projectenv ]]; then
#        . $PWD/.projectenv
#    fi
#}

# viewing man pages
#function man {
#/usr/bin/man $* | col -bp | iconv -c | view -c 'set ft=man nomod nolist' -
#}

# reload zshrc
function src() {
autoload -U zrecompile
[[ -f ~/.zshrc ]] && zrecompile -p ~/.zshrc
for i in "$(find ~/.zsh/ -type f)"; do
    [[ -f $i ]] && zrecompile -p $i
    [[ -f $i.zwc.old ]] && rm -f $i.zwc.old
done
[[ -f ~/.zcompdump ]] && zrecompile -p ~/.zcompdump
[[ -f ~/.zcompdump ]] && zrecompile -p ~/.zcompdump
[[ -f ~/.zshrc.zwc.old ]] && rm -f ~/.zshrc.zwc.old
[[ -f ~/.zcompdump.zwc.old ]] && rm -f ~/.zcompdump.zwc.old
source ~/.zshrc
}

# git functions
function ga() { git add $* }
function gl() { git log $* }
function gs() { git status $* }
function gp() { git push $* }
function gc() { git commit -m "$*" }
function gca() { git commit -am "$*" }
function gpl() { git pull $* }

function hack() {
    current=`git branch | awk '/\*/ { print $2 }'`
    git fetch origin
    git rebase origin/master
}
function ship() {
    current=`git branch | awk '/\*/ { print $2 }'`
    git checkout master
    git merge origin # should be fast forward
    git merge $current
    git push origin master
    git checkout $current
}
function ssp() { hack && rake && ship }

extract_archive () {
    local old_dirs current_dirs lower
    lower=${(L)1}
    old_dirs=( *(N/) )
    if [[ $lower == *.tar.gz || $lower == *.tgz ]]; then
        tar xvzf $1
    elif [[ $lower == *.gz ]]; then
        gunzip $1
    elif [[ $lower == *.tar.bz2 || $lower == *.tbz ]]; then
        tar xvjf $1
    elif [[ $lower == *.bz2 ]]; then
        bunzip2 $1
    elif [[ $lower == *.zip ]]; then
        unzip $1
    elif [[ $lower == *.rar ]]; then
        unrar e $1
    elif [[ $lower == *.tar ]]; then
        tar xvf $1
    elif [[ $lower == *.lha ]]; then
        lha e $1
    else
        print "Unknown archive type: $1"
        return 1
    fi
    # Change in to the newly created directory, and
    # list the directory contents, if there is one.
    current_dirs=( *(N/) )
    for i in {1..${#current_dirs}}; do
        if [[ $current_dirs[$i] != $old_dirs[$i] ]]; then
            cd $current_dirs[$i]
            break
        fi
    done
}

roll () {
    FILE=$1
    shift
    case $FILE in
        *.tar.bz2|*.tbz|*.tar.gz|*.tgz|*.tar.lzma|*.tlz) tar cavf "$FILE" $* ;;
        *.gz) gzip "$FILE" $* ;;
        *.zip) zip -r "$FILE" $* ;;
        *.rar) rar "$FILE" $* ;;
        *.7z) 7za a -t7z "$FILE" $* ;;
    esac
}

unroll () {
    FILE=$1
    shift
    case $FILE in
        *.tar.bz2|*.tbz|*.tar.gz|*.tgz|*.tar.lzma|*.tlz) tar xavf "$FILE" ;;
        *.gz) gunzip "$FILE" ;;
        *.zip) unzip "$FILE" ;;
        *.rar) unrar e "$FILE" ;;
        *.7z) 7za e "$FILE" ;;
    esac
}

function mkcd() { mkdir -p "$1" && cd "$1"; }
function hex2dec { awk 'BEGIN { printf "%d\n",0x$1}'; }
function dec2hex { awk 'BEGIN { printf "%x\n",$1}'; }

function mkmine() { sudo chown -R ${USER} ${1:-.}; }
# sanitize - set file/directory owner and permissions to normal values (644/755)
# Usage: sanitize <file>
sanitize() {
    chmod -R u=rwX,go=rX "$@"
    chown -R ${USER}.users "$@"
}

#compdef '_files -g "*.gz *.tgz *.bz2 *.tbz *.zip *.rar *.tar *.lha"' extract_archive

